{
  "name": "autoprefixer",
  "version": "0.5.20130629",
  "description": "Parse CSS and add prefixed properties and values by actual Can I Use database",
  "keywords": [
    "css",
    "prefix",
    "rework"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "LGPL 3",
  "repository": {
    "type": "git",
    "url": "https://github.com/ai/autoprefixer.git"
  },
  "dependencies": {
    "css-parse": "~> 1.5.0",
    "css-stringify": "~> 1.3.1"
  },
  "devDependencies": {
    "coffee-script": "1.6.3",
    "component": "0.16.5",
    "fs-extra": "0.6.3",
    "should": "1.2.2",
    "rework": "0.17.0",
    "mocha": "1.11.0",
    "glob": "3.2.1"
  },
  "bin": {
    "autoprefixer": "./bin/autoprefixer"
  },
  "main": "lib/autoprefixer",
  "scripts": {
    "test": "mocha --reporter spec --require should --compilers coffee:coffee-script"
  },
  "readme": "# Autoprefixer\n\nParse CSS and add prefixed properties and values from\n[Can I Use](http://caniuse.com/) database for actual browsers.\n\nWrite your usual CSS code without prefixes (forget about them at all,\nAutoprefixer will think for you):\n\n```js\nvar css = 'a { transition: transform 1s }';\nvar prefixed = autoprefixer.compile(css);\n```\n\nAutoprefixer uses a database with current browser statistics\nand properties support to add prefixes automatically:\n\n```css\na {\n  -webkit-transition: -webkit-transform 1s;\n  -o-transition: -o-transform 1s;\n  transition: -ms-transform 1s;\n  transition: transform 1s\n}\n```\n\nTwitter account for news and releases:\n[@autoprefixer](https://twitter.com/autoprefixer).\n\nSponsored by [Evil Martians](http://evilmartians.com/).\n\n## Translations\n\nДокументация на русском: [habrahabr.ru/company/evilmartians/blog/176909](http://habrahabr.ru/company/evilmartians/blog/176909/)\n\n## Features\n\n* You write normal CSS (or use Autoprefixer after Sass, Stylus\n  or another preprocessor).\n* You write normal properties (not special mixins), so you don’t need\n  to remember which properties needs to be prefixed.\n* Autoprefixer uses only necessary prefixes. You choose which browsers\n  (by default the last 2 versions for each browser).\n  Did you know, that prefixes for `border-radius`\n  [have not been necessary](http://caniuse.com/border-radius)\n  for a long time now?\n* The properties and browsers database is updated automatically\n  (from [Can I Use](http://caniuse.com/)), so prefixes will always be up-to-date\n  (scripts don’t have holidays or work).\n* Removes outdated prefixes to clean libraries and legacy code.\n* It also adds prefixes to values. For example, to `calc(1em + 5px)` or\n  to property names in `transition`.\n\n## Browsers\n\nYou can specify browsers for your project (by default, it’s `last 2 versions`):\n\n```js\nautoprefixer.compile(css, [\"last 1 version\", \"> 1%\", \"ie 8\", \"ie 7\"]);\n```\n\n* `last n versions` is last `n` versions for each browser (for example,\n  [Google also uses](http://support.google.com/a/bin/answer.py?answer=33864)\n  “last 2 versions” strategy).\n* `> n%` is browser versions, whose global usage statistics is more than `n`%.\n* You can also set browsers directly.\n\nBlackberry and stock Android browsers will not be used in `last n versions`\nor `> n%` selects. Add them by name if you need them:\n\n```js\nautoprefixer.compile(css, [\"last 1 version\", \"bb 10\", \"android 4\"]);\n```\n\n## Usage\n\n### Ruby on Rails\n\nAdd [autoprefixer-rails](https://github.com/ai/autoprefixer-rails) gem\nto `Gemfile` and write CSS in usual way:\n\n```ruby\ngem \"autoprefixer-rails\"\n```\n\n### Ruby\n\nYou can integrate Autoprefixer into your Sprockets environment\nby `autoprefixer-rails` gem:\n\n```ruby\nAutoprefixerRails.install(sprockets_env)\n```\n\nor process CSS from plain Ruby:\n\n```ruby\nprefixed = AutoprefixerRails.compile(css)\n```\n\n### Grunt\n\nYou can use [grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)\nplugin for Grunt. Install npm package and add it to Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-autoprefixer');\n```\n\n### Node.js\n\nUse `autoprefixer` npm package:\n\n```js\nvar autoprefixer = require('autoprefixer');\nvar prefixed     = autoprefixer.compile(css);\n```\n\n### JavaScript\n\nYou can use Autoprefixer in browser or non-node JS runtime\nwith [standalone version](https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js).\n\n### Rework\n\nAutoprefixer can be also as [Rework](https://github.com/visionmedia/rework)\nfilter, so you can can combine it with other filters:\n\n```js\nrework(css).\n    use( autoprefixer.rework(['> 1%', 'opera 12.5']) ).\n    use( rework.references() ).\n    toString();\n```\n\n### Others\n\nYou can use `autoprefixer` binary to process CSS files in any assets manager:\n\n```\nsudo npm install --global autoprefixer\nautoprefixer *.css\n```\n\nSee `autoprefixer -h` for help.\n\n### Sublime Text\n\nYou can process your styles directly in Sublime Text by\n[sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer)\nplugin.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ai/autoprefixer/issues"
  },
  "_id": "autoprefixer@0.5.20130629",
  "dist": {
    "shasum": "79c2723f88fa38bff5d29cfd70a2ce382baffc71"
  },
  "_from": "autoprefixer@0.5",
  "_resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-0.5.20130629.tgz"
}
